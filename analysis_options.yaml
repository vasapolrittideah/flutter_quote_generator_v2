# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    - always_declare_return_types
    - always_put_required_named_parameters_first
    - avoid_annotating_with_dynamic
    - avoid_bool_literals_in_conditional_expressions
    - require_trailing_commas
    - prefer_single_quotes
    - always_put_control_body_on_new_line
    - always_use_package_imports
    - no_logic_in_create_state
    - prefer_if_null_operators
    - prefer_is_empty
    - prefer_is_not_operator
    - eol_at_end_of_file
    - prefer_const_declarations
    - prefer_final_in_for_each
    - prefer_final_locals
    - sort_constructors_first
    - sort_unnamed_constructors_first
    - cancel_subscriptions
    - join_return_with_assignment
    - file_names

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
